package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/AlbertRossJoh/planning-poker-backend/graph/model"
)

var (
	usr2Cards       = make(map[string]int)
	cardsPlayedChan = make(chan []*model.UserCard, 1024)
)

// PlayCard is the resolver for the playCard field.
func (r *mutationResolver) PlayCard(ctx context.Context, input model.UserCardInput) ([]*model.UserCard, error) {
	usr2Cards[input.Name] = input.Num
	usrCards := getUsrCards()
	cardsPlayedChan <- usrCards
	return usrCards, nil
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context) ([]*model.UserCard, error) {
	return getUsrCards(), nil
}

// Cards is the resolver for the cards field.
func (r *subscriptionResolver) Cards(ctx context.Context) (<-chan []*model.UserCard, error) {
	return cardsPlayedChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

func getUsrCards() []*model.UserCard {
	acc := make([]*model.UserCard, 0)
	for key, val := range usr2Cards {
		acc = append(acc, &model.UserCard{Name: key, Num: val})
	}
	return acc
}
