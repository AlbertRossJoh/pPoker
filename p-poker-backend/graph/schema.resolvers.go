package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/AlbertRossJoh/planning-poker-backend/graph/model"
)

// PlayCard is the resolver for the playCard field.
func (r *mutationResolver) PlayCard(ctx context.Context, input model.UserCardInput) ([]*model.UserCard, error) {
	if sessionChooser[input.Session] == nil {
		sessionChooser[input.Session] = make(map[string]*model.UserCard)
	}
	if sessionChooser[input.Session][input.Name] == nil {
		sessionChooser[input.Session][input.Name] = &model.UserCard{Name: input.Name, Num: input.Num, PollresultReady: false}
	} else {
		uc := sessionChooser[input.Session][input.Name]
		sessionChooser[input.Session][input.Name] = &model.UserCard{Name: uc.Name, Num: input.Num, PollresultReady: uc.PollresultReady}
	}
	usrCards := getUsrCards(input.Session)
	return usrCards, nil
}

// EndSession is the resolver for the endSession field.
func (r *mutationResolver) EndSession(ctx context.Context, input model.EndSessionInput) (bool, error) {
	if sessionChooser[input.Session] == nil {
		sessionChooser[input.Session] = make(map[string]*model.UserCard)
	}
	for key, val := range sessionChooser[input.Session] {
		sessionChooser[input.Session][key] = &model.UserCard{Name: val.Name, Num: val.Num, PollresultReady: true}
	}
	return true, nil
}

// BeginSession is the resolver for the beginSession field.
func (r *mutationResolver) BeginSession(ctx context.Context, input model.BeginSessionInput) (bool, error) {
	if sessionChooser[input.Session] == nil {
		sessionChooser[input.Session] = make(map[string]*model.UserCard)
	}
	delete(sessionChooser, input.Session)
	return true, nil
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context, session string) ([]*model.UserCard, error) {
	return getUsrCards(session), nil
}

// Cards is the resolver for the cards field.
func (r *subscriptionResolver) Cards(ctx context.Context) (<-chan []*model.UserCard, error) {
	return cardsPlayedChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
